//* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
  } from "ethers";
  import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
  import { Listener, Provider } from "@ethersproject/providers";
  import type { Event, EventFilter } from "ethers";
  
  
  export interface TypedEvent<
    TArgsArray extends Array<any> = any,
    TArgsObject = any
  > extends Event {
    args: TArgsArray & TArgsObject;
  }
  
  export interface TypedEventFilter<_TEvent extends TypedEvent>
    extends EventFilter {}
  
  type __TypechainArgsArray<T> = T extends TypedEvent<infer U> ? U : never;
  
  export interface TypedListener<TEvent extends TypedEvent> {
    (...listenerArg: [...__TypechainArgsArray<TEvent>, TEvent]): void;
  }
  
  export interface OnEvent<TRes> {
    <TEvent extends TypedEvent>(
      eventFilter: TypedEventFilter<TEvent>,
      listener: TypedListener<TEvent>
    ): TRes;
    (eventName: string, listener: Listener): TRes;
  }
  
  
  export interface BadgesInterface extends utils.Interface {
    contractName: "Badges";
    functions: {
      "DEFAULT_ADMIN_ROLE()": FunctionFragment;
      "EVENT_TRIGGERER_ROLE()": FunctionFragment;
      "balanceOf(address,uint256)": FunctionFragment;
      "balanceOfBatch(address[],uint256[])": FunctionFragment;
      "getAttestationsRegistry()": FunctionFragment;
      "getRoleAdmin(bytes32)": FunctionFragment;
      "grantRole(bytes32,address)": FunctionFragment;
      "hasRole(bytes32,address)": FunctionFragment;
      "initialize(string,address)": FunctionFragment;
      "isApprovedForAll(address,address)": FunctionFragment;
      "renounceRole(bytes32,address)": FunctionFragment;
      "revokeRole(bytes32,address)": FunctionFragment;
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": FunctionFragment;
      "safeTransferFrom(address,address,uint256,uint256,bytes)": FunctionFragment;
      "setApprovalForAll(address,bool)": FunctionFragment;
      "setAttestationsRegistry(address)": FunctionFragment;
      "setUri(string)": FunctionFragment;
      "supportsInterface(bytes4)": FunctionFragment;
      "triggerTransferEvent(address,address,address,uint256,uint256)": FunctionFragment;
      "uri(uint256)": FunctionFragment;
    };
  
    encodeFunctionData(
      functionFragment: "DEFAULT_ADMIN_ROLE",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "EVENT_TRIGGERER_ROLE",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "balanceOf",
      values: [string, BigNumberish]
    ): string;
    encodeFunctionData(
      functionFragment: "balanceOfBatch",
      values: [string[], BigNumberish[]]
    ): string;
    encodeFunctionData(
      functionFragment: "getAttestationsRegistry",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "getRoleAdmin",
      values: [BytesLike]
    ): string;
    encodeFunctionData(
      functionFragment: "grantRole",
      values: [BytesLike, string]
    ): string;
    encodeFunctionData(
      functionFragment: "hasRole",
      values: [BytesLike, string]
    ): string;
    encodeFunctionData(
      functionFragment: "initialize",
      values: [string, string]
    ): string;
    encodeFunctionData(
      functionFragment: "isApprovedForAll",
      values: [string, string]
    ): string;
    encodeFunctionData(
      functionFragment: "renounceRole",
      values: [BytesLike, string]
    ): string;
    encodeFunctionData(
      functionFragment: "revokeRole",
      values: [BytesLike, string]
    ): string;
    encodeFunctionData(
      functionFragment: "safeBatchTransferFrom",
      values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
    ): string;
    encodeFunctionData(
      functionFragment: "safeTransferFrom",
      values: [string, string, BigNumberish, BigNumberish, BytesLike]
    ): string;
    encodeFunctionData(
      functionFragment: "setApprovalForAll",
      values: [string, boolean]
    ): string;
    encodeFunctionData(
      functionFragment: "setAttestationsRegistry",
      values: [string]
    ): string;
    encodeFunctionData(functionFragment: "setUri", values: [string]): string;
    encodeFunctionData(
      functionFragment: "supportsInterface",
      values: [BytesLike]
    ): string;
    encodeFunctionData(
      functionFragment: "triggerTransferEvent",
      values: [string, string, string, BigNumberish, BigNumberish]
    ): string;
    encodeFunctionData(functionFragment: "uri", values: [BigNumberish]): string;
  
    decodeFunctionResult(
      functionFragment: "DEFAULT_ADMIN_ROLE",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "EVENT_TRIGGERER_ROLE",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "balanceOfBatch",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "getAttestationsRegistry",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "getRoleAdmin",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "isApprovedForAll",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "renounceRole",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "safeBatchTransferFrom",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "safeTransferFrom",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "setApprovalForAll",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "setAttestationsRegistry",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "setUri", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "supportsInterface",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "triggerTransferEvent",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;
  
    events: {
      "ApprovalForAll(address,address,bool)": EventFragment;
      "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
      "RoleGranted(bytes32,address,address)": EventFragment;
      "RoleRevoked(bytes32,address,address)": EventFragment;
      "TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
      "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
      "URI(string,uint256)": EventFragment;
    };
  
    getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TransferBatch"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TransferSingle"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "URI"): EventFragment;
  }
  
  export type ApprovalForAllEvent = TypedEvent<
    [string, string, boolean],
    { account: string; operator: string; approved: boolean }
  >;
  
  export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;
  
  export type RoleAdminChangedEvent = TypedEvent<
    [string, string, string],
    { role: string; previousAdminRole: string; newAdminRole: string }
  >;
  
  export type RoleAdminChangedEventFilter =
    TypedEventFilter<RoleAdminChangedEvent>;
  
  export type RoleGrantedEvent = TypedEvent<
    [string, string, string],
    { role: string; account: string; sender: string }
  >;
  
  export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;
  
  export type RoleRevokedEvent = TypedEvent<
    [string, string, string],
    { role: string; account: string; sender: string }
  >;
  
  export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;
  
  export type TransferBatchEvent = TypedEvent<
    [string, string, string, BigNumber[], BigNumber[]],
    {
      operator: string;
      from: string;
      to: string;
      ids: BigNumber[];
      values: BigNumber[];
    }
  >;
  
  export type TransferBatchEventFilter = TypedEventFilter<TransferBatchEvent>;
  
  export type TransferSingleEvent = TypedEvent<
    [string, string, string, BigNumber, BigNumber],
    {
      operator: string;
      from: string;
      to: string;
      id: BigNumber;
      value: BigNumber;
    }
  >;
  
  export type TransferSingleEventFilter = TypedEventFilter<TransferSingleEvent>;
  
  export type URIEvent = TypedEvent<
    [string, BigNumber],
    { value: string; id: BigNumber }
  >;
  
  export type URIEventFilter = TypedEventFilter<URIEvent>;
  
  export interface Badges extends BaseContract {
    contractName: "Badges";
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
  
    interface: BadgesInterface;
  
    queryFilter<TEvent extends TypedEvent>(
      event: TypedEventFilter<TEvent>,
      fromBlockOrBlockhash?: string | number | undefined,
      toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>;
  
    listeners<TEvent extends TypedEvent>(
      eventFilter?: TypedEventFilter<TEvent>
    ): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(
      eventFilter: TypedEventFilter<TEvent>
    ): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
  
    functions: {
      DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;
  
      EVENT_TRIGGERER_ROLE(overrides?: CallOverrides): Promise<[string]>;
  
      balanceOf(
        account: string,
        id: BigNumberish,
        overrides?: CallOverrides
      ): Promise<[BigNumber]>;
  
      balanceOfBatch(
        accounts: string[],
        ids: BigNumberish[],
        overrides?: CallOverrides
      ): Promise<[BigNumber[]]>;
  
      getAttestationsRegistry(overrides?: CallOverrides): Promise<[string]>;
  
      getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;
  
      grantRole(
        role: BytesLike,
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      hasRole(
        role: BytesLike,
        account: string,
        overrides?: CallOverrides
      ): Promise<[boolean]>;
  
      initialize(
        uri: string,
        owner: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      isApprovedForAll(
        account: string,
        operator: string,
        overrides?: CallOverrides
      ): Promise<[boolean]>;
  
      renounceRole(
        role: BytesLike,
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      revokeRole(
        role: BytesLike,
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      safeBatchTransferFrom(
        from: string,
        to: string,
        ids: BigNumberish[],
        amounts: BigNumberish[],
        data: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      safeTransferFrom(
        from: string,
        to: string,
        id: BigNumberish,
        amount: BigNumberish,
        data: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      setApprovalForAll(
        operator: string,
        approved: boolean,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      setAttestationsRegistry(
        attestationsRegistry: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      setUri(
        uri: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      supportsInterface(
        interfaceId: BytesLike,
        overrides?: CallOverrides
      ): Promise<[boolean]>;
  
      triggerTransferEvent(
        operator: string,
        from: string,
        to: string,
        id: BigNumberish,
        value: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
    };
  
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;
  
    EVENT_TRIGGERER_ROLE(overrides?: CallOverrides): Promise<string>;
  
    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  
    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;
  
    getAttestationsRegistry(overrides?: CallOverrides): Promise<string>;
  
    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;
  
    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  
    initialize(
      uri: string,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  
    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    setAttestationsRegistry(
      attestationsRegistry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    setUri(
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  
    triggerTransferEvent(
      operator: string,
      from: string,
      to: string,
      id: BigNumberish,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
  
    callStatic: {
      DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;
  
      EVENT_TRIGGERER_ROLE(overrides?: CallOverrides): Promise<string>;
  
      balanceOf(
        account: string,
        id: BigNumberish,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      balanceOfBatch(
        accounts: string[],
        ids: BigNumberish[],
        overrides?: CallOverrides
      ): Promise<BigNumber[]>;
  
      getAttestationsRegistry(overrides?: CallOverrides): Promise<string>;
  
      getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;
  
      grantRole(
        role: BytesLike,
        account: string,
        overrides?: CallOverrides
      ): Promise<void>;
  
      hasRole(
        role: BytesLike,
        account: string,
        overrides?: CallOverrides
      ): Promise<boolean>;
  
      initialize(
        uri: string,
        owner: string,
        overrides?: CallOverrides
      ): Promise<void>;
  
      isApprovedForAll(
        account: string,
        operator: string,
        overrides?: CallOverrides
      ): Promise<boolean>;
  
      renounceRole(
        role: BytesLike,
        account: string,
        overrides?: CallOverrides
      ): Promise<void>;
  
      revokeRole(
        role: BytesLike,
        account: string,
        overrides?: CallOverrides
      ): Promise<void>;
  
      safeBatchTransferFrom(
        from: string,
        to: string,
        ids: BigNumberish[],
        amounts: BigNumberish[],
        data: BytesLike,
        overrides?: CallOverrides
      ): Promise<void>;
  
      safeTransferFrom(
        from: string,
        to: string,
        id: BigNumberish,
        amount: BigNumberish,
        data: BytesLike,
        overrides?: CallOverrides
      ): Promise<void>;
  
      setApprovalForAll(
        operator: string,
        approved: boolean,
        overrides?: CallOverrides
      ): Promise<void>;
  
      setAttestationsRegistry(
        attestationsRegistry: string,
        overrides?: CallOverrides
      ): Promise<void>;
  
      setUri(uri: string, overrides?: CallOverrides): Promise<void>;
  
      supportsInterface(
        interfaceId: BytesLike,
        overrides?: CallOverrides
      ): Promise<boolean>;
  
      triggerTransferEvent(
        operator: string,
        from: string,
        to: string,
        id: BigNumberish,
        value: BigNumberish,
        overrides?: CallOverrides
      ): Promise<void>;
  
      uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
    };
  
    filters: {
      "ApprovalForAll(address,address,bool)"(
        account?: string | null,
        operator?: string | null,
        approved?: null
      ): ApprovalForAllEventFilter;
      ApprovalForAll(
        account?: string | null,
        operator?: string | null,
        approved?: null
      ): ApprovalForAllEventFilter;
  
      "RoleAdminChanged(bytes32,bytes32,bytes32)"(
        role?: BytesLike | null,
        previousAdminRole?: BytesLike | null,
        newAdminRole?: BytesLike | null
      ): RoleAdminChangedEventFilter;
      RoleAdminChanged(
        role?: BytesLike | null,
        previousAdminRole?: BytesLike | null,
        newAdminRole?: BytesLike | null
      ): RoleAdminChangedEventFilter;
  
      "RoleGranted(bytes32,address,address)"(
        role?: BytesLike | null,
        account?: string | null,
        sender?: string | null
      ): RoleGrantedEventFilter;
      RoleGranted(
        role?: BytesLike | null,
        account?: string | null,
        sender?: string | null
      ): RoleGrantedEventFilter;
  
      "RoleRevoked(bytes32,address,address)"(
        role?: BytesLike | null,
        account?: string | null,
        sender?: string | null
      ): RoleRevokedEventFilter;
      RoleRevoked(
        role?: BytesLike | null,
        account?: string | null,
        sender?: string | null
      ): RoleRevokedEventFilter;
  
      "TransferBatch(address,address,address,uint256[],uint256[])"(
        operator?: string | null,
        from?: string | null,
        to?: string | null,
        ids?: null,
        values?: null
      ): TransferBatchEventFilter;
      TransferBatch(
        operator?: string | null,
        from?: string | null,
        to?: string | null,
        ids?: null,
        values?: null
      ): TransferBatchEventFilter;
  
      "TransferSingle(address,address,address,uint256,uint256)"(
        operator?: string | null,
        from?: string | null,
        to?: string | null,
        id?: null,
        value?: null
      ): TransferSingleEventFilter;
      TransferSingle(
        operator?: string | null,
        from?: string | null,
        to?: string | null,
        id?: null,
        value?: null
      ): TransferSingleEventFilter;
  
      "URI(string,uint256)"(
        value?: null,
        id?: BigNumberish | null
      ): URIEventFilter;
      URI(value?: null, id?: BigNumberish | null): URIEventFilter;
    };
  
    estimateGas: {
      DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;
  
      EVENT_TRIGGERER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;
  
      balanceOf(
        account: string,
        id: BigNumberish,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      balanceOfBatch(
        accounts: string[],
        ids: BigNumberish[],
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      getAttestationsRegistry(overrides?: CallOverrides): Promise<BigNumber>;
  
      getRoleAdmin(
        role: BytesLike,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      grantRole(
        role: BytesLike,
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      hasRole(
        role: BytesLike,
        account: string,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      initialize(
        uri: string,
        owner: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      isApprovedForAll(
        account: string,
        operator: string,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      renounceRole(
        role: BytesLike,
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      revokeRole(
        role: BytesLike,
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      safeBatchTransferFrom(
        from: string,
        to: string,
        ids: BigNumberish[],
        amounts: BigNumberish[],
        data: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      safeTransferFrom(
        from: string,
        to: string,
        id: BigNumberish,
        amount: BigNumberish,
        data: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      setApprovalForAll(
        operator: string,
        approved: boolean,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      setAttestationsRegistry(
        attestationsRegistry: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      setUri(
        uri: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      supportsInterface(
        interfaceId: BytesLike,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      triggerTransferEvent(
        operator: string,
        from: string,
        to: string,
        id: BigNumberish,
        value: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
    };
  
    populateTransaction: {
      DEFAULT_ADMIN_ROLE(
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      EVENT_TRIGGERER_ROLE(
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      balanceOf(
        account: string,
        id: BigNumberish,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      balanceOfBatch(
        accounts: string[],
        ids: BigNumberish[],
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      getAttestationsRegistry(
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      getRoleAdmin(
        role: BytesLike,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      grantRole(
        role: BytesLike,
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      hasRole(
        role: BytesLike,
        account: string,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      initialize(
        uri: string,
        owner: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      isApprovedForAll(
        account: string,
        operator: string,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      renounceRole(
        role: BytesLike,
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      revokeRole(
        role: BytesLike,
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      safeBatchTransferFrom(
        from: string,
        to: string,
        ids: BigNumberish[],
        amounts: BigNumberish[],
        data: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      safeTransferFrom(
        from: string,
        to: string,
        id: BigNumberish,
        amount: BigNumberish,
        data: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      setApprovalForAll(
        operator: string,
        approved: boolean,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      setAttestationsRegistry(
        attestationsRegistry: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      setUri(
        uri: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      supportsInterface(
        interfaceId: BytesLike,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      triggerTransferEvent(
        operator: string,
        from: string,
        to: string,
        id: BigNumberish,
        value: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      uri(
        arg0: BigNumberish,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
    };
  }